
// Построение двоичного кода натурального числа
Вход: натуральное число k : 0 \leq k \leq 2^n - 1.
Выход: битовая шкала B_n.
func B(k : int, n : int) : array[1..n] of 0..1
    B_n : array[1..n] of 0..1

    for i from n downto 1 do
        B_n[i] := k mod 2 // очередной бит
        k := k div 2 // оставшееся число
    end for

    return B_n
end func


// Перечисление подмножеств n-элементного множества
Вход: число n \geq 0 - мощность множества
Выход: последовательность кодов подмножеств B(i)
func B_all(n : int)
    for i from 0 to 2^n - 1 do yield B(i, n) end for
end func


Вход: i - номер подмножества
Выход: номер изменяемого разряда
func Q(i : int) : int
    q := 1; j := i
    while j mod 2 = 0 do j := j div 2; q := q + 1 end while
    return q
end func


// Построение бинарного кода Грея n-элементного множества
Вход: число n \geq 0 - мощность множества
Выход: последовательность кодов подмножеств B
func Gray(n : int)
    B_n : array[1..n] of 0..1 // битовая шкала
    for i from 1 to n do B_n[i] := 0 end for // инициализация
    yield B_n // пустое множество
    for i from 1 to 2^n - 1 do
        p := Q(i) // определение номера элемента
        B_n[p] := 1 - B_n[p] // добавление или удаление элемента
        yield B_n // очередное подмножество
    end for
end func
